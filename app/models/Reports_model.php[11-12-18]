<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Reports_model extends CI_Model
{


	public function __construct()
	{
		parent::__construct();

	}

	public function getAllProducts()
	{
		$q = $this->db->get('products');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}

			return $data;
		}
	}
	
	
	
 public function getAllquantity()
	{
		$this->db->select('sum(quantity) as total');
		 $q = $this->db->get('products');
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			
			return $s->total;
		  }
		return FALSE;
	}
 public function getAllquantityByStore($warehouse=NULL) {  

		$this->db->select('sum(quantity) as total');
		if($warehouse !=NULL){
		 	$this->db->where('store_id',$warehouse); 
		 }
		 $q = $this->db->get('product_store_qty');
		 		 
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			
			return $s->total;
		  }
		return FALSE;
	}
	
 public function getAllcost()
	{  
	 $q = $this->db->get('products');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
	}	
	
	
	public function getAllCustomers() {
		if(!$this->Admin){
            $this->db->where('store_id',$this->session->userdata('store_id'));
         }
		$q = $this->db->get('customers');

		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
	}

	public function topProducts($store_id) {
		$m = date('Y-m');
		$this->db->select($this->db->dbprefix('products').".code as product_code, ".$this->db->dbprefix('products').".name as product_name, sum(".$this->db->dbprefix('sale_items').".quantity) as quantity")
		->join('products', 'products.id=sale_items.product_id', 'left')
		->join('sales', 'sales.id=sale_items.sale_id', 'left')
		->order_by("sum(".$this->db->dbprefix('sale_items').".quantity)", 'desc')
		->group_by('sale_items.product_id')
		->limit(10)
		->like('sales.date', $m, 'both');
		if($store_id !=NULL){ $this->db->where('sale_items.store_id', $store_id);}
		$q = $this->db->get('sale_items');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
	}

	public function topProducts1($store_id) {
		$m = date('Y-m', strtotime('first day of last month'));
		$this->db->select($this->db->dbprefix('products').".code as product_code, ".$this->db->dbprefix('products').".name as product_name, sum(".$this->db->dbprefix('sale_items').".quantity) as quantity")
		->join('products', 'products.id=sale_items.product_id', 'left')
		->join('sales', 'sales.id=sale_items.sale_id', 'left')
		->order_by("sum(".$this->db->dbprefix('sale_items').".quantity)", 'desc')
		->group_by('sale_items.product_id')
		->limit(10)
		->like('sales.date', $m, 'both');
		if($store_id !=NULL){ $this->db->where('sale_items.store_id', $store_id);}
		$q = $this->db->get('sale_items');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
	}

	public function topProducts3($store_id) {
		$this->db->select($this->db->dbprefix('products').".code as product_code, ".$this->db->dbprefix('products').".name as product_name, sum(".$this->db->dbprefix('sale_items').".quantity) as quantity")
		->join('products', 'products.id=sale_items.product_id', 'left')
		->join('sales', 'sales.id=sale_items.sale_id', 'left')
		->order_by("sum(".$this->db->dbprefix('sale_items').".quantity)", 'desc')
		->group_by('sale_items.product_id')
		->limit(10)
		->where($this->db->dbprefix('sales').'.date >= last_day(now()) + interval 1 day - interval 3 month', NULL, FALSE);
		if($store_id !=NULL){ $this->db->where('sale_items.store_id', $store_id);}
		$q = $this->db->get('sale_items');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
	}

	public function topProducts12($store_id)
	{
		$this->db->select($this->db->dbprefix('products').".code as product_code, ".$this->db->dbprefix('products').".name as product_name, sum(".$this->db->dbprefix('sale_items').".quantity) as quantity")
		->join('products', 'products.id=sale_items.product_id', 'left')
		->join('sales', 'sales.id=sale_items.sale_id', 'left')
		->order_by("sum(".$this->db->dbprefix('sale_items').".quantity)", 'desc')
		->group_by('sale_items.product_id')
		->limit(10)
		->where($this->db->dbprefix('sales').'.date >= last_day(now()) + interval 1 day - interval 12 month', NULL, FALSE);
		if($store_id !=NULL){ $this->db->where('sale_items.store_id', $store_id);}
		$q = $this->db->get('sale_items');
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}

			return $data;
		}
	}

	public function getDailySales($year, $month,$store=NULL) {		 
		if(!$this->Admin){
			$store_id = $this->session->userdata('store_id');
			$myQuery = "SELECT DATE_FORMAT( date,  '%e' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
		COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount FROM (".$this->db->dbprefix('sales').")
		WHERE DATE_FORMAT( date,  '%Y-%m' ) =  '{$year}-{$month}' and store_id={$store_id}
		GROUP BY DATE_FORMAT( date,  '%e' )";
		}else{ 
			$store_id = $store;
			if($store !=NULL){
				$myQuery = "SELECT DATE_FORMAT( date,  '%e' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
		COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount FROM (".$this->db->dbprefix('sales').")
		WHERE DATE_FORMAT( date,  '%Y-%m' ) =  '{$year}-{$month}' and store_id={$store_id}
		GROUP BY DATE_FORMAT( date,  '%e' )";
			}else{
			$myQuery = "SELECT DATE_FORMAT( date,  '%e' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
		COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount FROM (".$this->db->dbprefix('sales').")
		WHERE DATE_FORMAT( date,  '%Y-%m' ) =  '{$year}-{$month}'
		GROUP BY DATE_FORMAT( date,  '%e' )";

			}
			
		}

		
		$q = $this->db->query($myQuery, false);
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
		return FALSE;
	}


	public function getMonthlySales($year,$store_id=NULL){
		if(!$this->Admin){
			$store_id = $this->session->userdata('store_id');
			$myQuery = "SELECT DATE_FORMAT( date,'%c' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
			COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount
			FROM (".$this->db->dbprefix('sales').")
			WHERE DATE_FORMAT( date,  '%Y' ) =  '{$year}' && store_id={$store_id}
			GROUP BY date_format( date, '%c' ) ORDER BY date_format( date, '%c' ) ASC";
		} else {
			if($store_id !=NULL){
				$myQuery = "SELECT DATE_FORMAT( date,'%c' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
			COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount
			FROM (".$this->db->dbprefix('sales').")
			WHERE DATE_FORMAT( date,  '%Y' ) =  '{$year}' && store_id={$store_id}
			GROUP BY date_format( date, '%c' ) ORDER BY date_format( date, '%c' ) ASC";

			}else{
				$myQuery = "SELECT DATE_FORMAT( date,'%c' ) AS date, COALESCE(sum(total), 0) as total, COALESCE(sum(grand_total), 0) as grand_total,
		COALESCE(sum(total_tax), 0) as tax, COALESCE(sum(total_discount), 0) as discount
		FROM (".$this->db->dbprefix('sales').")
		WHERE DATE_FORMAT( date,  '%Y' ) =  '{$year}'
		GROUP BY date_format( date, '%c' ) ORDER BY date_format( date, '%c' ) ASC";
			}
			
		}
 
		$q = $this->db->query($myQuery, false);
		if($q->num_rows() > 0) {
			foreach (($q->result()) as $row) {
				$data[] = $row;
			}
			return $data;
		}
		return FALSE;
	}

	public function getTotalSalesforCustomer($customer_id, $user = NULL, $start_date = NULL, $end_date = NULL)
	{
		if($start_date && $end_date) {
			$this->db->where('date >=', $start_date);
			$this->db->where('date <=', $end_date);
		}
		if($user) {
			$this->db->where('created_by', $user);
		}
		 $q=$this->db->get_where('sales', array('customer_id' => $customer_id));
		 return $q->num_rows();

	}

	public function getTotalSalesValueforCustomer($customer_id, $user = NULL, $start_date = NULL, $end_date = NULL)
	{
		$this->db->select('sum(grand_total) as total');
		if($start_date && $end_date) {
			$this->db->where('date >=', $start_date);
			$this->db->where('date <=', $end_date);
		}
		if($user) {
			$this->db->where('created_by', $user);
		}
		 $q=$this->db->get_where('sales', array('customer_id' => $customer_id));
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			return $s->total;
		  }
		return FALSE;
	}
	
 public function getTotalPaidSalesValueforCustomer($customer_id, $user = NULL, $start_date = NULL, $end_date = NULL)
	{
		$this->db->select('sum(paid) as paid');
		if($start_date && $end_date) {
			$this->db->where('date >=', $start_date);
			$this->db->where('date <=', $end_date);
		}
		if($user) {
			$this->db->where('created_by', $user);
		}
		 $q=$this->db->get_where('sales', array('customer_id' => $customer_id));
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			return $s->paid;
		  }
		return FALSE;
	}
	
 public function getTotalQuantityValueforCustomer($customer_id, $user = NULL, $start_date = NULL, $end_date = NULL)
	{
		$this->db->select('sum(total_quantity) as total_quantity');
		if($start_date && $end_date) {
			$this->db->where('date >=', $start_date);
			$this->db->where('date <=', $end_date);
		}
		if($user) {
			$this->db->where('created_by', $user);
		}
		 $q=$this->db->get_where('sales', array('customer_id' => $customer_id));
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			return $s->total_quantity;
		  }
		return FALSE;
	}
	
	public function getTotalItemValueforCustomer($customer_id, $user = NULL, $start_date = NULL, $end_date = NULL) {
		$this->db->select('sum(total_items) as total_items');
		if($start_date && $end_date) {
			$this->db->where('date >=', $start_date);
			$this->db->where('date <=', $end_date);
		}
		if($user) {
			$this->db->where('created_by', $user);
		}
		 $q=$this->db->get_where('sales', array('customer_id' => $customer_id));
		 if( $q->num_rows() > 0 )
		  {
			$s = $q->row();
			return $s->total_items;
		  }
		return FALSE;
	}

	public function getAllStaff() {
		if(!$this->Admin){
			$this->db->where('store_id',$this->session->userdata('store_id'));
		}

        $q = $this->db->get('users');
        if ($q->num_rows() > 0) {
            foreach (($q->result()) as $row) {
                $data[] = $row;
            }
            return $data;
        }
        return FALSE;
    }

	public function getTotalSales($start, $end,$store=NULL) {
		if(!$this->Admin){
			$store_id = $this->session->userdata('store_id');
		}else{ 
			$store_id = $store;
		}
        $this->db->select('count(id) as total, sum(COALESCE(grand_total, 0)) as total_amount, SUM(COALESCE(paid, 0)) as paid, SUM(COALESCE(total_tax, 0)) as tax', FALSE)
            ->where("date >= '{$start}' and date <= '{$end}'", NULL, FALSE);
        if($store_id !=NULL){$this->db->where('store_id',$store_id);}
        $q = $this->db->get('sales');
        if ($q->num_rows() > 0) {
            return $q->row();
        }
        return FALSE;
    }

    public function getTotalPurchases($start, $end,$store=NULL) {
    	if(!$this->Admin){
			$store_id = $this->session->userdata('store_id');
		}else{ 
			$store_id = $store;
		}
        $this->db->select('count(id) as total, sum(COALESCE(total, 0)) as total_amount', FALSE)
            ->where("date >= '{$start}' and date <= '{$end}'", NULL, FALSE);
        if($store_id !=NULL){$this->db->where('store_id',$store_id);}
        $q = $this->db->get('purchases');
        if ($q->num_rows() > 0) {
            return $q->row();
        }
        return FALSE;
    }

    public function getTotalExpenses($start, $end,$store=NULL) {
    	if(!$this->Admin){
			$store_id = $this->session->userdata('store_id');
		}else{ 
			$store_id = $store;
		}
        $this->db->select('count(id) as total, sum(COALESCE(amount, 0)) as total_amount', FALSE)
            ->where("date >= '{$start}' and date <= '{$end}'", NULL, FALSE);
        if($store_id !=NULL){$this->db->where('store_id',$store_id);}
        $q = $this->db->get('expenses');
        if ($q->num_rows() > 0) {
            return $q->row();
        }
        return FALSE;
    }
    public function saleAndPurseCount($store_id=NULL){  
    	if($store_id !=NULL){
    		$query = $this->db->query("SELECT PR.id,PR.name,code,( SELECT COALESCE(sum(sa.quantity), 0) FROM tec_sale_items sa WHERE sa.product_id=PR.id && sa.store_id= $store_id ) sold,
                        ( SELECT COALESCE(sum(pur.quantity), 0)
                          FROM tec_purchase_items pur
                          WHERE pur.product_id=PR.id && pur.store_id= $store_id) purchase 
                    FROM tec_products PR group by PR.id");   		 

    	}else{ 
    		$query = $this->db->query("SELECT PR.id,PR.name,code,( SELECT COALESCE(sum(sa.quantity), 0) FROM tec_sale_items sa WHERE sa.product_id=PR.id ) sold,
                        ( SELECT COALESCE(sum(pur.quantity), 0)
                          FROM tec_purchase_items pur
                          WHERE pur.product_id=PR.id ) purchase 
                    FROM tec_products PR group by PR.id"); 
    			
    	}
       
        $query->result_array();  
        return $query->result_array(); 
    }

    public function pquery($type,$code,$warehouse=NULL){

    	 $q=$this->db->get_where('products', array('code' => $code));
		   if( $q->num_rows() > 0 ) {
		   $s = $q->row();

		   //query seles tbl 
		   if($type=='sales'){
		       $this->db->from('sale_items'); 
		        $this->db->where('product_id', $s->id);        
		        $query = $this->db->get(); ; 
		        $results = $query->result();
		        return $results ;
		   }

		   if($type=='purchase'){
		    $this->db->from('purchase_items'); 
		        $this->db->where('product_id', $s->id);        
		        $query = $this->db->get(); ; 
		        $results = $query->result();		        
		        return $results;
		   }
	   
	    } 

     	/* $q=$this->db->get_where('products', array('code' => $code));
		   if( $q->num_rows() > 0 ) {
		   $s = $q->row();

		   //query seles tbl 
		   if($type=='sales'){
		       $this->db->from('sale_items'); 
		       if(!$this->Admin){
		    		$this->db->where('store_id',$this->session->userdata('store_id'));
		    	}else{
		    		$this->db->where('store_id',$warehouse);
		    	} 
		        $this->db->where('product_id', $s->id);        
		        $query = $this->db->get(); 
		        //$results = $query->result();
		         foreach (($query->result()) as $sale) {
                    $this->db->from('pro_sequence');			         
			        $this->db->where('pro_id', $s->id); 
			        $this->db->where('sales_id', $sale->sale_id);        
			        $sequence = $this->db->get();
			        foreach (($sequence->result()) as $seque) {
			        	$seques->sequence[] = $seque->sequence;  
			        } 
			        $rows['sequence'] = $seques->sequence; 
			        $rows['sale_id'] = $sale->sale_id ;
                    $rows['quantity'] = $sale->quantity ;
                    $rows['unit_price'] = $sale->unit_price;
                    $seques->sequence='';
                    $results[] = $rows;  
                    
                }  
		        return $results ;
		   }

		   if($type=='purchase'){
			    $this->db->from('purchase_items'); 
			    if(!$this->Admin){
		    		$this->db->where('store_id',$this->session->userdata('store_id'));
		    	} else{
		    		$this->db->where('store_id',$warehouse);
		    	}
			    $this->db->where('product_id', $s->id);        
			    $query = $this->db->get();
			    // $results = $query->result(); 
			    foreach (($query->result()) as $purchase) { 
			    	$this->db->from('pro_sequence');
			        $this->db->where('pro_id', $s->id);
			        $this->db->where('purchases_id', $purchase->purchase_id);     
			        $sequence = $this->db->get();
			        foreach (($sequence->result()) as $seque) {
			        	$seques->sequence[] = $seque->sequence;  
			        } 
			        $rows['sequence'] = $seques->sequence;
			        $rows['purchase_id'] = $purchase->purchase_id ;
	                $rows['quantity'] = $purchase->quantity ;
	                $rows['cost'] = $purchase->cost;
	                $seques->sequence='';
	                $results[] = $rows;
			    }  
			    return $results;
		   }
	   
	    }*/ 
    }
    public function payablelist(){ 
    	if(!$this->Admin){
	        $this->db->where('store_id',$this->session->userdata('store_id'));
	     }
        $this->db->from('suppliers');  
        $this->db->group_by('id');     
        $query = $this->db->get();
        $results = $query->result();    
        $i=0;   
        foreach ($results as $key => $value) {
            $i++;
            $Purchases = array() ;
            $supplier_id = $value->id;             
            $opening_blance = $value->opening_blance;  
            $openBColl = $value->opening_blance_coll;            

            // purchases //
            $this->db->select('supplier_id as sid, SUM(total) as gtotal, SUM(paid) as tpaid, SUM(deu) as tdue');
            $this->db->from('purchases'); 
            $this->db->where('supplier_id',$supplier_id);     
            $queryPurchases = $this->db->get();
            $resultsPurchases = $queryPurchases->row();

            // adv payment
            $this->db->select(' SUM(adv_amount) as adv_amount ');
            $this->db->from('adv_payment'); 
            $this->db->where('suppliers_id',$supplier_id);    
            $queryadv = $this->db->get();
            $advresults = $queryadv->row(); 

            // adv marge
            $this->db->from('marge'); 
            $this->db->where('supplier_id',$supplier_id);    
            $querymarge = $this->db->get();
            $margeresults = $querymarge->row(); 

            if(isset($margeresults->marge_id)){              
              $marge =  $margeresults->marge_id;
            }else{
              $marge =  '' ;
            }

            if(isset($advresults->adv_amount)){              
              $tdue =  $resultsPurchases->tdue - $advresults->adv_amount ;
            }else{
               
              $tdue = $resultsPurchases->tdue ;
            }
            
            $tpaid = $resultsPurchases->tpaid + $advresults->adv_amount;
            
            $Purchases['id'] = $value->id;
            $Purchases['name'] = $value->name ;
            $Purchases['sid'] = $resultsPurchases->sid ;
            $Purchases['gtotal'] = $resultsPurchases->gtotal + $opening_blance ;
            $Purchases['tpaid'] = $tpaid ;
            $Purchases['tdue'] =  - ($tdue + $opening_blance);
            $Purchases['marge_id'] =  $marge ; 
            $Purchases['store_id'] =  $value->store_id ;         
            $resultsOut[] =  $Purchases ;                
        }    
        return $resultsOut ; 
    } 

    public function recablelist(){
    	if(!$this->Admin){
	        $this->db->where('store_id',$this->session->userdata('store_id'));
	     }
        $this->db->from('customers');  
        $this->db->group_by('id');     
        $query = $this->db->get();
        $results = $query->result();      
        foreach ($results as $key => $value) {
            $Sales = array() ;
            $customer_id = $value->id;
            $opening_blance = $value->opening_blance;

            // sales //
            $this->db->select('customer_id as cid,SUM(grand_total) as gtotal, SUM(paid) as tpaid, (SUM(grand_total) - SUM(paid)) AS due');
            $this->db->from('sales'); 
            $this->db->where('customer_id',$customer_id);
            $this->db->order_by("due","desc");     
            $queryPurchases = $this->db->get();
            $resultsPurchases = $queryPurchases->row();  

            // adv collection
            $this->db->select('SUM(adv_collection) as adv_collection ');
            $this->db->from('adv_collection'); 
            $this->db->where('customer_id',$customer_id);    
            $queryadv = $this->db->get();
            $advresults = $queryadv->row(); 

            // marge
            $this->db->from('marge'); 
            $this->db->where('customer_id',$customer_id);    
            $querymarge = $this->db->get();
            $margeresults = $querymarge->row(); 

            if(isset($margeresults->marge_id)){              
              $marge =  $margeresults->marge_id ;
            }else{
              $marge = '' ;
            }

            if(isset($advresults->adv_collection)){              
              $tdue =  ($resultsPurchases->due) - ($advresults->adv_collection) ;
            }else{
               
              $tdue =  $resultsPurchases->due ;
            } 
            
            $tpaid = $resultsPurchases->tpaid + $advresults->adv_collection;          

            $Sales['id'] = $value->id;
            $Sales['cname'] = $value->name ;
            $Sales['cid'] = $resultsPurchases->cid ;
            $Sales['gtotal'] = $resultsPurchases->gtotal + $opening_blance;
            $Sales['tpaid'] = $tpaid ;
            $Sales['due'] =  $tdue + $opening_blance ;
            $Sales['marge_id'] =  $marge ;
            $Sales['store_id'] =  $value->store_id ;       
            $resultsOut[] =  $Sales ;                
        }   
        return $resultsOut ; 
    }

    public function allSales(){
    	$this->db->from('sale_items');    	
    	$this->db->group_by('sale_id'); 
    	$query = $this->db->get(''); 
    	return $query->result(); 
    }

    public function salesReturnAmount($store_id){ 
    	$this->db->select('SUM(return_amount) as return_amount');
    	$this->db->from('sreturn_items'); 
    	if($store_id){
    		$this->db->where('store_id',$store_id);
    	} 
    	$query = $this->db->get('');  
    	return $query->result();
    }

    public function cashInHand($store_id=NULL){  
    	$this->db->select('SUM(cash_in_hand) as cash_in_hand');
    	$this->db->from('registers'); 
    	$this->db->where('status','open');
    	if($store_id){
    		$this->db->where('store_id',$store_id);
    	} 
    	$query = $this->db->get('');  
    	return $query->result();
    }

    public function invoiceProfit(){ 
    	$store_id = $this->session->userdata('store_id');
    	if(!$this->Admin){
    		$query = $this->db->query("SELECT PR.id,PR.date,PR.customer_name,PR.total,PR.store_id,( SELECT COALESCE(sum(sa.quantity*sa.cost), 0) FROM tec_sale_items sa WHERE sa.sale_id=PR.id ) as cost_price,( SELECT COALESCE(sum(sa.quantity), 0) FROM tec_sale_items sa WHERE sa.sale_id=PR.id ) as qty FROM tec_sales PR WHERE PR.store_id=$store_id group by PR.id");

    	}else{
    		$query = $this->db->query("SELECT PR.id,PR.date,PR.customer_name,PR.total,PR.store_id,( SELECT COALESCE(sum(sa.quantity*sa.cost), 0) FROM tec_sale_items sa WHERE sa.sale_id=PR.id ) as cost_price,( SELECT COALESCE(sum(sa.quantity), 0) FROM tec_sale_items sa WHERE sa.sale_id=PR.id ) as qty FROM tec_sales PR group by PR.id");
    	}
    	
        $query->result_array();  
        return $query->result_array(); 
    }

    public function salaryReport($start_date,$end_date){ 
    	$this->db->select($this->db->dbprefix('paysalary').".pay_id,pay_date,month_id,year,amount,".
    	$this->db->dbprefix('paysalary').".store_id,".
        $this->db->dbprefix('employee').".name,note");
        $this->db->join('employee', 'employee.id=paysalary.emp_id'); 
        if($start_date) { $this->db->where('pay_date >=', $start_date.' 00:00:00'); }
        if($end_date) { $this->db->where('pay_date <=', $end_date.' 23:59:59'); } 
        if(!$this->Admin){
        	$this->db->where('paysalary.store_id', $this->session->userdata('store_id'));
        }
        $q = $this->db->get('paysalary');       

        if($q->num_rows() > 0) {
			 
			return $q->result();
		} 
    }

    public function warrantyReport(){
    	$this->db->from('pro_sequence');   
    	$query = $this->db->get('');  
    	return $query->result();
    }
}

